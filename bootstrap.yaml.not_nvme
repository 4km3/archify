---
- name: Bootstrap Arch Linux
  tags: bootstrap
  hosts: bootstrap
  gather_facts: no
  vars:
    ata_pass: PasSWorD
    main_block_device: /dev/sdb
    sudoers_config: "%wheel ALL=(ALL) NOPASSWD: ALL"
    home: "{{ lookup('env', 'HOME') }}"
    user: "{{ lookup('env', 'USER') }}"
    pubkey: "{{ home }}/.ssh/keys.d/id_ed25519-hal.pub" 
    key: "{{ lookup('file', pubkey) }}"
  pre_tasks:
    - raw:
        pacman --sync --refresh --needed --noconfirm python2
    - command: "{{ item }}"
      changed_when: false
      with_items:
        - hdparm --security-set-pass {{ ata_pass }} {{ main_block_device }}
        - hdparm --security-erase    {{ ata_pass }} {{ main_block_device }}
  roles:
    - role: partition
      main_block_device: "{{ main_block_device }}"
  tasks:
    - set_fact:
        main_block_device="{{ main_block_device }}"
    - mount:
        name=/mnt
        src={{ main_block_device }}3
        fstype=btrfs
        opts=noatime,discard,ssd,autodefrag,compress=lzo,space_cache
        state=mounted
    - command:
        btrfs subvolume create {{ item }}
      args:
        chdir: /mnt
        creates: /mnt/{{ item }}
      with_items:
        - '@'
        - '@home'
    - mount:
        name=/mnt
        src={{ main_block_device }}3
        fstype=btrfs
        state=unmounted
    - mount:
        name=/mnt
        src={{ main_block_device }}3
        fstype=btrfs
        opts=noatime,discard,ssd,autodefrag,compress=lzo,space_cache,subvol='@'
        state=mounted
    - mount:
        name=/mnt/boot
        src={{ main_block_device }}1
        fstype=vfat
        opts=rw,noatime,fmask=0133,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro
        state=mounted
    - mount:
        name=/mnt/home
        src={{ main_block_device }}3
        fstype=btrfs
        opts=noatime,discard,ssd,autodefrag,compress=lzo,space_cache,subvol='@home'
        state=mounted
    - command: "{{ item }}"
      with_items:
        - pacstrap /mnt base base-devel intel-ucode linux-lts python2 openssh btrfs-progs
        - systemd-firstboot --root=/mnt --locale=en_US.UTF-8 --timezone=Europe/Madrid --hostname=hal --copy-root-password --setup-machine-id
        - bootctl --path /mnt/boot install
        - cp -a /mnt/etc/fstab /mnt/etc/fstab.orig
        - arch-chroot /mnt useradd -m -G wheel,log -s /bin/bash {{ user }}
    - shell: genfstab -U -p /mnt >> /mnt/etc/fstab
    - lineinfile:
        dest=/mnt/etc/sudoers.d/wheel-nopasswd
        line="{{ sudoers_config }}"
        create=yes
        state=present
    - user:
        name="{{ user }}"
        createhome=no
    - authorized_key:
        user="{{ user }}"
        key="{{ key }}"
        path="/mnt/home/{{ user }}/.ssh/authorized_keys"
        manage_dir=yes
    - copy:
        content=''
        dest=/mnt/etc/udev/rules.d/80-net-setup-link.rules
        owner=root
        group=root
        mode=0644
    - command:
        arch-chroot /mnt systemctl enable sshd

- name: Bootstrap Arch Linux | Configure systemd-boot
  hosts: bootstrap
  tags: bootstrap
  roles:
    - role: systemd-boot
      systemd_boot_main_block_device: "{{ main_block_device }}"

- name: Bootstrap Arch Linux | reboot and wait for ssh to be available
  hosts: bootstrap
  tags: bootstrap
  tasks:
    - local_action:
        module: command ssh root@{{ ansible_ssh_host | default(inventory_hostname) }} reboot
      failed_when: false
    - local_action: wait_for port=22 host="{{ ansible_ssh_host | default(inventory_hostname) }}" search_regex=OpenSSH delay=10
